fn longest_common_prefix(strings: &[String]) -> String {
    if strings.is_empty() {
        return String::new(); // If the input is empty, return an empty string
    }
    
    let first_string = &strings[0]; // Get the first string in the set
    let mut longest_prefix = String::new(); // Initialize the longest common prefix
    
    'outer: for (i, c) in first_string.chars().enumerate() {
        for string in strings.iter().skip(1) {
            // Check if the current character matches the character at the same position in other strings
            match string.chars().nth(i) {
                Some(ch) if ch == c => continue,
                _ => break 'outer, // If the character doesn't match, break out of the outer loop
            }
        }
        // If all strings have the same character at the current position, append it to the longest prefix
        longest_prefix.push(c);
    }
    
    longest_prefix
}

fn main() {
    let strings = vec![
        String::from("flower"),
        String::from("flow"),
        String::from("flight"),
    ];
    println!("Longest common prefix: {}", longest_common_prefix(&strings));

    let strings2 = vec![
        String::from("dog"),
        String::from("racecar"),
        String::from("car"),
    ];
    println!("Longest common prefix: {}", longest_common_prefix(&strings2));
}
